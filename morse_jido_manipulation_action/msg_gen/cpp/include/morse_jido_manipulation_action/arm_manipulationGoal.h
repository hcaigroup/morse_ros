/* Auto-generated by genmsg_cpp for file /home/tina/work/ros/sandbox/cram_morse_jido/morse_jido_manipulation_action/msg/arm_manipulationGoal.msg */
#ifndef MORSE_JIDO_MANIPULATION_ACTION_MESSAGE_ARM_MANIPULATIONGOAL_H
#define MORSE_JIDO_MANIPULATION_ACTION_MESSAGE_ARM_MANIPULATIONGOAL_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "sensor_msgs/JointState.h"

namespace morse_jido_manipulation_action
{
template <class ContainerAllocator>
struct arm_manipulationGoal_ : public ros::Message
{
  typedef arm_manipulationGoal_<ContainerAllocator> Type;

  arm_manipulationGoal_()
  : joints()
  {
  }

  arm_manipulationGoal_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  {
  }

  typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joints_type;
   ::sensor_msgs::JointState_<ContainerAllocator>  joints;


private:
  static const char* __s_getDataType_() { return "morse_jido_manipulation_action/arm_manipulationGoal"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "13b568889983e6c4080c58d8e7c2c89c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
sensor_msgs/JointState joints\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, joints);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, joints);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(joints);
    return size;
  }

  typedef boost::shared_ptr< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator>  const> ConstPtr;
}; // struct arm_manipulationGoal
typedef  ::morse_jido_manipulation_action::arm_manipulationGoal_<std::allocator<void> > arm_manipulationGoal;

typedef boost::shared_ptr< ::morse_jido_manipulation_action::arm_manipulationGoal> arm_manipulationGoalPtr;
typedef boost::shared_ptr< ::morse_jido_manipulation_action::arm_manipulationGoal const> arm_manipulationGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace morse_jido_manipulation_action

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "13b568889983e6c4080c58d8e7c2c89c";
  }

  static const char* value(const  ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x13b568889983e6c4ULL;
  static const uint64_t static_value2 = 0x080c58d8e7c2c89cULL;
};

template<class ContainerAllocator>
struct DataType< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "morse_jido_manipulation_action/arm_manipulationGoal";
  }

  static const char* value(const  ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
sensor_msgs/JointState joints\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct arm_manipulationGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::morse_jido_manipulation_action::arm_manipulationGoal_<ContainerAllocator> & v) 
  {
    s << indent << "joints: ";
s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joints);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MORSE_JIDO_MANIPULATION_ACTION_MESSAGE_ARM_MANIPULATIONGOAL_H

